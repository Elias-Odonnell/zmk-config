/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        VDRight: VDRight {
            compatible = "zmk,behavior-macro";
            label = "VDRight";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_GUI>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_GUI>;
        };

        VDLeft: VDLeft {
            compatible = "zmk,behavior-macro";
            label = "VDLeft";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_GUI>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_GUI>;
        };

        import: import {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = 
                <&macro_wait_time 50>,
                <&kp SPACE &kp I &kp M &kp P &kp O &kp R &kp T &kp SPACE>,
                <&macro_wait_time 50>;
            label = "IMPORT";
        };

        fromSKLearn: fromSKLearn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings =
                <&kp F &kp R &kp O &kp M &kp SPACE &kp S &kp K &kp L &kp E &kp A &kp R &kp N &kp DOT>;
            label = "FROMSKLEARN";
        };

        test: test {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = 
                <&fromSKLearn &kp M &kp O &kp D &kp E &kp L &kp UNDER &kp S &kp E &kp L &kp E &kp C &kp T &kp I &kp O &kp N>,
                <&macro_wait_time 400>,
                <&import>,
                <&macro_wait_time 400>,
                <&kp T &kp R &kp A &kp I &kp N &kp UNDER &kp T &kp E &kp S &kp T &kp UNDER &kp S &kp P &kp L &kp I &kp T>;
            label = "TEST";
        };
    };

    combos {
        compatible = "zmk,combos";

        lhctrl {
            bindings = <&kp LCTRL>;
            key-positions = <16 15>;
        };

        rhctrl {
            bindings = <&kp LCTRL>;
            key-positions = <20 19>;
        };

        lhalt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <14 16>;
        };

        rhalt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <21 19>;
        };

        lhshift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <14 15>;
        };

        rhshift {
            bindings = <&kp RSHIFT>;
            key-positions = <20 21>;
        };

        rhgui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <19 20 21 22>;
        };

        lhgui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <14 15 16 13>;
        };

        lhctrl_shift {
            bindings = <&kp LC(LEFT_SHIFT)>;
            key-positions = <14 15 16>;
        };

        rhctrl_shift {
            bindings = <&kp LC(LEFT_SHIFT)>;
            key-positions = <21 20 19>;
        };

        F14Left {
            bindings = <&kp F14>;
            key-positions = <1 2 3 4>;
        };

        F14Right {
            bindings = <&kp F14>;
            key-positions = <7 8 9 10>;
        };

        F13right {
            bindings = <&kp F13>;
            key-positions = <34 33 32 31>;
        };

        F13left {
            bindings = <&kp F13>;
            key-positions = <25 26 27 28>;
        };

        testmacrocombo {
            bindings = <&test>;
            key-positions = <11 10 9 8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC     &kp Q  &kp W  &kp E  &kp R      &kp T  &kp Y  &kp U      &kp I      &kp O    &kp P     &kp BSPC
&kp TAB     &kp A  &kp S  &kp D  &kp F      &kp G  &kp H  &kp J      &kp K      &kp L    &kp SEMI  &kp SQT
&caps_word  &kp Z  &kp X  &kp C  &kp V      &kp B  &kp N  &kp M      &kp COMMA  &kp DOT  &kp FSLH  &caps_word
                          &mo 1  &kp ENTER  &mo 2  &mo 2  &kp SPACE  &mo 1
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1  &kp N2  &kp N3      &kp N4  &kp N5   &kp N6    &kp N7    &kp N8  &kp N9     &kp N0  &trans
&trans  &trans  &trans  &kp DELETE  &trans  &trans   &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans      &trans  &VDLeft  &VDRight  &trans    &trans  &trans     &trans  &trans
                        &trans      &trans  &mo 3    &mo 3     &trans    &trans
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp AT_SIGN        &trans          &kp EQUAL         &kp PRCNT             &trans                &kp AMPS         &kp UNDERSCORE         &trans             &kp PIPE2        &kp ASTERISK  &trans
&trans     &kp DOUBLE_QUOTES  &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &trans                &kp NON_US_HASH  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &trans        &kp LEFT_ALT
&trans     &trans             &trans          &trans            &trans                &kp NON_US_BACKSLASH  &kp EXCLAMATION  &trans                 &kp MINUS          &kp PLUS         &trans        &trans
                                              &mo 3             &trans                &trans                &trans           &trans                 &mo 3
            >;
        };

        Bluetooth {
            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans        &trans  &trans  &trans
            >;
        };
    };
};
