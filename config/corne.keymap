/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp ASTERISK>,
                <&pointer>;
        };
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp SPACE>,
                <&space>;
        };
        
        lh_pht: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 30 31>;
        };
        
        rh_pht: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <1 2 3 4 13 14 15 16 17 25 26 27 28 29>;
        };
    };

    macros {
        pointer: pointer {
            compatible = "zmk,behavior-macro";
            label = "pointer";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
        };
        space: space {
            compatible = "zmk,behavior-macro";
            label = "space";
            #binding-cells = <0>;
            bindings = <&kp END &kp SEMI>;
        };
        VDRight: VDRight {
            compatible = "zmk,behavior-macro";
            label = "VDRight";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_WIN>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_GUI>;
        };
        VDLeft: VDLeft {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_GUI>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_GUI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
                 &kp ESC   &kp Q   &kp W           &kp E          &kp R   &kp T      &kp Y            &kp U             &kp I     &kp O     &kp P            &kp BSPC
                 &kp TAB   &kp A   &kp S  &lh_pht LALT D &lh_pht LCTL F   &kp G      &kp H   &rh_pht LCTL J    &rh_pht LALT K     &kp L  &kp SEMI             &kp SQT
 &mt LEFT_SHIFT CAPSLOCK   &kp Z   &kp X           &kp C          &kp V   &kp B      &kp N            &kp M         &kp COMMA   &kp DOT  &kp FSLH  &mt RSHFT CAPSLOCK
                                          &lt 1 LEFT_GUI      &kp ENTER   &mo 2      &mo 2        &kp SPACE   &lt 1 RIGHT_ALT
            >;
             
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &trans  &kp N1  &kp N2      &kp N3     &kp N4   &kp N5    &kp N6     &kp N7  &kp N8     &kp N9  &kp N0        &trans
 &kp TAB  &trans  &trans  &kp DELETE     &trans   &trans  &kp LEFT   &kp DOWN  &kp UP  &kp RIGHT  &trans  &kp LEFT_ALT
  &trans  &trans  &trans      &trans     &trans  &VDLeft  &VDRight     &trans  &trans     &trans  &trans        &trans
                              &trans  &kp ENTER    &mo 3     &mo 3  &kp SPACE  &trans
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &trans        &kp AT_SIGN          &trans         &kp EQUAL             &kp PRCNT                &trans         &kp AMPS         &kp UNDERSCORE             &trans        &kp PIPE2    &td0        &trans
 &kp TAB  &kp DOUBLE_QUOTES  &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS                &trans  &kp NON_US_HASH  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &trans  &kp LEFT_ALT
  &trans             &trans          &trans            &trans                &trans  &kp NON_US_BACKSLASH  &kp EXCLAMATION              &kp MINUS          &kp MINUS         &kp PLUS  &trans        &trans
                                                        &mo 3             &kp ENTER                &trans           &trans                   &td1              &mo 3
            >;
        };

        Bluetooth {
            bindings = <
     &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans  &trans
     &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                               &trans        &trans        &trans  &trans  &trans  &trans
            >;
        };
    };
};
