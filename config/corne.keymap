/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        VDRight: VDRight {
            compatible = "zmk,behavior-macro";
            label = "VDRight";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_GUI>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_GUI>;
        };

        VDLeft: VDLeft {
            compatible = "zmk,behavior-macro";
            label = "VDLeft";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_GUI>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_GUI>;
        };

        splitData: splitData {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp R &kp O &kp M &kp SPACE &kp S &kp K &kp L &kp E &kp A &kp R &kp N &kp DOT &kp M &kp O &kp D &kp E &kp L &kp UNDER &kp S &kp E &kp L &kp E &kp C &kp T &kp I &kp O &kp N &kp SPACE &kp I &kp M &kp P &kp O &kp R &kp T &kp SPACE &kp T &kp R &kp A &kp I &kp N &kp UNDER &kp T &kp E &kp S &kp T &kp UNDER &kp S &kp P &kp L &kp I &kp T &kp SPACE &kp ENTER &kp C &kp O &kp L &kp U &kp M &kp N &kp S &kp SPACE &kp EQUAL &kp SPACE &kp LBKT &kp RBKT &kp ENTER &kp A &kp L &kp L &kp UNDER &kp LS(X) &kp SPACE &kp EQUAL &kp SPACE &kp D &kp F &kp LBKT &kp C &kp O &kp L &kp U &kp M &kp N &kp S &kp RBKT &kp ENTER &kp A &kp L &kp L &kp UNDER &kp Y &kp SPACE &kp EQUAL &kp SPACE &kp D &kp F &kp LBKT &kp SQT &kp P &kp R &kp E &kp D &kp I &kp C &kp T &kp I &kp O &kp N &kp SQT &kp RBKT &kp ENTER &kp T &kp R &kp A &kp I &kp N &kp UNDER &kp LS(X) &kp COMMA &kp SPACE &kp T &kp E &kp S &kp T &kp UNDER &kp LS(X) &kp COMMA &kp SPACE &kp T &kp R &kp A &kp I &kp N &kp UNDER &kp Y &kp COMMA &kp SPACE &kp T &kp E &kp S &kp T &kp UNDER &kp Y &kp SPACE &kp EQUAL &kp SPACE &kp T &kp R &kp A &kp I &kp N &kp UNDER &kp T &kp E &kp S &kp T &kp UNDER &kp S &kp P &kp L &kp I &kp T &kp LPAR &kp A &kp L &kp L &kp UNDER &kp LS(X) &kp COMMA &kp SPACE &kp A &kp L &kp L &kp UNDER &kp Y &kp COMMA &kp SPACE &kp T &kp E &kp S &kp T &kp UNDER &kp S &kp I &kp Z &kp E &kp EQUAL &kp N0 &kp DOT &kp N2 &kp COMMA &kp R &kp A &kp N &kp D &kp O &kp M &kp UNDER &kp S &kp T &kp A &kp T &kp E &kp EQUAL &kp N0 &kp RPAR>;
            label = "splitData";
            wait-ms = <30>;
            tap-ms = <40>;
        };

        read_csv: read_csv {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp D &kp DOT &kp R &kp E &kp A &kp D &kp UNDER &kp C &kp S &kp V &kp LPAR &kp AT &kp AT &kp COMMA &kp SPACE &kp S &kp E &kp P &kp EQUAL &kp AT &kp COMMA &kp AT &kp RPAR &kp ENTER>;
            label = "READ_CSV";
            wait-ms = <30>;
            tap-ms = <40>;
        };

        read_csv_extended: read_csv_extended {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp D &kp DOT &kp R &kp E &kp A &kp D &kp UNDER &kp C &kp S &kp V &kp LPAR &kp AT &kp AT &kp COMMA &kp SPACE &kp S &kp E &kp P &kp EQUAL &kp AT &kp COMMA &kp AT &kp COMMA &kp SPACE &kp U &kp S &kp E &kp C &kp O &kp L &kp S &kp EQUAL &kp LBKT &kp AT &kp C &kp O &kp L &kp N &kp A &kp M &kp E &kp AT &kp COMMA &kp AT &kp C &kp O &kp L &kp N2 &kp N &kp A &kp M &kp E &kp AT &kp RBKT &kp COMMA &kp I &kp N &kp D &kp E &kp X &kp UNDER &kp C &kp O &kp L &kp EQUAL &kp AT &kp C &kp O &kp L &kp UNDER &kp N &kp A &kp M &kp E &kp AT &kp COMMA &kp D &kp T &kp Y &kp P &kp E &kp EQUAL &kp LBRC &kp SQT &kp C &kp O &kp L &kp U &kp M &kp N &kp UNDER &kp N &kp A &kp M &kp E &kp SQT &kp COLON &kp SPACE &kp SQT &kp T &kp Y &kp P &kp E &kp SQT &kp RBRC &kp COMMA &kp SPACE &kp P &kp A &kp R &kp S &kp E &kp UNDER &kp D &kp A &kp T &kp E &kp EQUAL &kp LBKT &kp AT &kp D &kp A &kp T &kp E &kp UNDER &kp C &kp O &kp L &kp AT &kp RBKT &kp COMMA &kp SPACE &kp N &kp R &kp O &kp W &kp S &kp EQUAL &kp N1 &kp N0 &kp N0 &kp COMMA &kp SPACE &kp N &kp A &kp UNDER &kp V &kp A &kp L &kp U &kp E &kp S &kp EQUAL &kp LBKT &kp AT &kp QMARK &kp AT &kp RBKT &kp COMMA &kp SPACE &kp T &kp R &kp U &kp E &kp UNDER &kp V &kp A &kp L &kp U &kp E &kp S &kp EQUAL &kp LBKT &kp AT &kp Y &kp E &kp S &kp AT &kp RBKT &kp COMMA &kp SPACE &kp F &kp A &kp L &kp S &kp E &kp UNDER &kp V &kp A &kp L &kp U &kp E &kp S &kp EQUAL &kp LBKT &kp AT &kp N &kp O &kp AT &kp RBKT &kp RPAR &kp ENTER>;
            label = "READ_CSV_EXTENDED";
            wait-ms = <30>;
            tap-ms = <40>;
        };

        read_csv_clipboard: read_csv_clipboard {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp F &kp SPACE &kp EQUAL &kp SPACE &kp P &kp D &kp DOT &kp R &kp E &kp A &kp D &kp UNDER &kp C &kp L &kp I &kp P &kp B &kp O &kp A &kp R &kp D &kp LPAR &kp RPAR &kp SPACE &kp ENTER>;
            label = "READ_CSV_CLIPBOARD";
            wait-ms = <30>;
            tap-ms = <40>;
        };

        read_csv_multiple: read_csv_multiple {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp M &kp P &kp O &kp R &kp T &kp SPACE &kp G &kp L &kp O &kp B &kp ENTER &kp I &kp M &kp P &kp O &kp R &kp T &kp SPACE &kp O &kp S &kp ENTER &kp ENTER &kp F &kp I &kp L &kp E &kp S &kp SPACE &kp EQUAL &kp SPACE &kp G &kp L &kp O &kp B &kp DOT &kp G &kp L &kp O &kp B &kp LPAR &kp AT &kp F &kp I &kp L &kp E &kp UNDER &kp ASTRK &kp DOT &kp C &kp S &kp V &kp AT &kp RPAR &kp ENTER &kp ENTER &kp R &kp E &kp S &kp U &kp L &kp T &kp SPACE &kp EQUAL &kp SPACE &kp P &kp D &kp DOT &kp C &kp O &kp N &kp C &kp A &kp T &kp LPAR &kp LBKT &kp P &kp D &kp DOT &kp R &kp E &kp A &kp D &kp UNDER &kp C &kp S &kp V &kp LPAR &kp F &kp RPAR &kp SPACE &kp F &kp O &kp R &kp SPACE &kp F &kp SPACE &kp I &kp N &kp SPACE &kp F &kp I &kp L &kp E &kp S &kp RBKT &kp COMMA &kp SPACE &kp I &kp G &kp N &kp O &kp R &kp E &kp UNDER &kp I &kp N &kp D &kp E &kp X &kp EQUAL &kp LS(T) &kp R &kp U &kp E &kp RPAR &kp ENTER>;
            label = "READ_CSV_MULTIPLE";
            wait-ms = <30>;
            tap-ms = <40>;
        };

        pandas_if_then_else: pandas_if_then_else {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp F &kp LBKT &kp AT &kp O &kp U &kp T &kp P &kp U &kp T &kp AT &kp RBKT &kp SPACE &kp EQUAL &kp SPACE &kp N &kp P &kp DOT &kp W &kp H &kp E &kp R &kp E &kp LPAR &kp C &kp O &kp N &kp D &kp I &kp T &kp I &kp O &kp N &kp COMMA &kp SPACE &kp T &kp R &kp U &kp E &kp LS(R) &kp E &kp S &kp U &kp L &kp T &kp COMMA &kp SPACE &kp F &kp A &kp L &kp S &kp E &kp LS(R) &kp E &kp S &kp U &kp L &kp T &kp RPAR &kp ENTER>;
            label = "PANDAS_IF_THEN_ELSE";
            wait-ms = <30>;
            tap-ms = <40>;
        };

        pandas_pivot_table: pandas_pivot_table {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp A &kp B &kp L &kp E &kp SPACE &kp EQUAL &kp SPACE &kp P &kp D &kp DOT &kp P &kp I &kp V &kp O &kp T &kp UNDER &kp T &kp A &kp B &kp L &kp E &kp LPAR &kp D &kp F &kp COMMA &kp I &kp N &kp D &kp E &kp X &kp EQUAL &kp LBKT &kp SQT &kp I &kp N &kp D &kp E &kp X &kp N1 &kp SQT &kp COMMA &kp SQT &kp I &kp N &kp D &kp E &kp X &kp N2 &kp SQT &kp RBKT &kp COMMA &kp SPACE &kp V &kp A &kp L &kp U &kp E &kp S &kp EQUAL &kp LBKT &kp AT &kp C &kp O &kp L &kp U &kp M &kp N &kp N1 &kp AT &kp COMMA &kp SPACE &kp AT &kp C &kp O &kp L &kp U &kp M &kp N &kp N2 &kp AT &kp RBKT &kp COMMA &kp SPACE &kp A &kp G &kp G &kp F &kp U &kp N &kp C &kp EQUAL &kp LBRC &kp SQT &kp C &kp O &kp L &kp U &kp M &kp N &kp N1 &kp SQT &kp COLON &kp N &kp P &kp DOT &kp M &kp E &kp A &kp N &kp COMMA &kp SQT &kp C &kp O &kp L &kp U &kp M &kp N &kp N2 &kp SQT &kp COLON &kp N &kp P &kp DOT &kp S &kp U &kp M &kp RBRC &kp RPAR>;
            label = "PANDAS_PIVOT_TABLE";
            wait-ms = <30>;
            tap-ms = <40>;
        };

        excel_ifs: excel_ifs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp LS(I) &kp LS(F) &kp LPAR &kp C &kp O &kp N &kp D &kp I &kp T &kp I &kp O &kp N &kp COMMA &kp SPACE &kp T &kp R &kp U &kp E &kp LS(V) &kp A &kp L &kp U &kp E &kp COMMA &kp SPACE &kp F &kp A &kp L &kp S &kp E &kp LS(V) &kp A &kp L &kp U &kp E &kp RPAR>;
            label = "EXCEL_IF";
            wait-ms = <30>;
            tap-ms = <40>;
        };

        excel_sumifs: excel_sumifs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp LS(S) &kp LS(U) &kp LS(M) &kp LS(I) &kp LS(F) &kp LS(S) &kp LPAR &kp RPAR>;
            label = "EXCEL_SUMIF";
            wait-ms = <30>;
            tap-ms = <40>;
        };

        excel_countifs: excel_countifs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp LS(C) &kp LS(O) &kp LS(U) &kp LS(N) &kp LS(T) &kp LS(I) &kp LS(F) &kp LS(S) &kp LPAR &kp RPAR>;
            label = "EXCEL_COUNTIF";
            wait-ms = <30>;
            tap-ms = <40>;
        };

        excel_vlookup: excel_vlookup {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp LS(V) &kp LS(L) &kp LS(O) &kp LS(O) &kp LS(K) &kp LS(U) &kp LS(P) &kp LPAR &kp V &kp A &kp L &kp U &kp E &kp COMMA &kp SPACE &kp T &kp A &kp B &kp L &kp E &kp LS(R) &kp A &kp N &kp G &kp E &kp LBKT &kp DOLLAR &kp LS(A) &kp N1 &kp COLON &kp DOLLAR &kp C &kp N1 &kp N0 &kp RBKT &kp COMMA &kp SPACE &kp C &kp O &kp L &kp U &kp M &kp N &kp LS(T) &kp O &kp LS(R) &kp E &kp T &kp U &kp R &kp N &kp LBKT &kp N2 &kp RBKT &kp COMMA &kp SPACE &kp LS(F) &kp LS(A) &kp LS(L) &kp LS(S) &kp LS(E) &kp RPAR>;
            label = "EXCEL_VLOOKUP";
            wait-ms = <30>;
            tap-ms = <40>;
        };

        excel_trim: excel_trim {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp LS(T) &kp LS(R) &kp LS(I) &kp LS(M) &kp LPAR &kp RPAR>;
            label = "EXCEL_TRIM";
            wait-ms = <30>;
            tap-ms = <40>;
        };

        excel_min: excel_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp LS(M) &kp LS(I) &kp LS(N) &kp LPAR &kp RPAR>;
            label = "EXCEL_MIN";
            wait-ms = <30>;
            tap-ms = <40>;
        };

        excel_average: excel_average {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp LS(A) &kp LS(V) &kp LS(E) &kp LS(R) &kp LS(A) &kp LS(G) &kp LS(E) &kp LPAR &kp RPAR>;
            label = "EXCEL_AVERAGE";
            wait-ms = <30>;
            tap-ms = <40>;
        };

        excel_max: excel_max {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp LS(M) &kp LS(A) &kp LS(X) &kp LPAR &kp RPAR>;
            label = "EXCEL_MAX";
            wait-ms = <30>;
            tap-ms = <40>;
        };
    };

    combos {
        compatible = "zmk,combos";

        lhctrl {
            bindings = <&kp LCTRL>;
            key-positions = <16 15>;
        };

        rhctrl {
            bindings = <&kp LCTRL>;
            key-positions = <20 19>;
        };

        lhalt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <14 16>;
        };

        rhalt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <21 19>;
        };

        lhshift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <14 15>;
        };

        rhshift {
            bindings = <&kp RSHIFT>;
            key-positions = <20 21>;
        };

        rhgui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <19 20 21 22>;
        };

        lhgui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <14 15 16 13>;
        };

        lhctrl_shift {
            bindings = <&kp LC(LEFT_SHIFT)>;
            key-positions = <14 15 16>;
        };

        rhctrl_shift {
            bindings = <&kp LC(LEFT_SHIFT)>;
            key-positions = <21 20 19>;
        };

        to4right {
            bindings = <&mo 4>;
            key-positions = <10 9 8 7>;
        };

        to4left {
            bindings = <&to 4>;
            key-positions = <1 3 2 4>;
        };
    };

    behaviors {
        tap_read_csv: tap_read_csv {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_READ_CSV";
            #binding-cells = <0>;
            bindings =
                <&read_csv>,
                <&read_csv_clipboard>,
                <&read_csv_multiple>,
                <&read_csv_extended>;

            tapping-term-ms = <300>;
        };

        kp_stickyLayer: kp_stickyLayer {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_STICKYLAYER";
            bindings = <&sl>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        tap_excel_max_min: tap_excel_max_min {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_EXCEL_MAX_MIN";
            #binding-cells = <0>;
            bindings = <&excel_max>, <&excel_min>;

            tapping-term-ms = <300>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC     &kp Q  &kp W  &kp_stickyLayer 5 E  &kp R      &kp T  &kp Y  &kp U      &kp I      &kp O    &kp P     &kp BSPC
&kp TAB     &kp A  &kp S  &kp_stickyLayer 4 D  &kp F      &kp G  &kp H  &kp J      &kp K      &kp L    &kp SEMI  &kp SQT
&caps_word  &kp Z  &kp X  &kp C                &kp V      &kp B  &kp N  &kp M      &kp COMMA  &kp DOT  &kp FSLH  &caps_word
                          &mo 1                &kp ENTER  &mo 2  &mo 2  &kp SPACE  &mo 1
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1  &kp N2  &kp N3      &kp N4  &kp N5   &kp N6    &kp N7    &kp N8  &kp N9     &kp N0  &trans
&trans  &trans  &trans  &kp DELETE  &trans  &trans   &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans      &trans  &VDLeft  &VDRight  &trans    &trans  &trans     &trans  &trans
                        &trans      &trans  &mo 3    &mo 3     &trans    &trans
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp AT_SIGN        &trans          &kp EQUAL         &kp PRCNT             &trans                &kp AMPS         &kp UNDERSCORE         &trans             &kp PIPE2        &kp ASTERISK  &trans
&trans     &kp DOUBLE_QUOTES  &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &trans                &kp NON_US_HASH  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &trans        &trans
&trans     &trans             &trans          &trans            &trans                &kp NON_US_BACKSLASH  &kp EXCLAMATION  &trans                 &kp MINUS          &kp PLUS         &trans        &trans
                                              &mo 3             &trans                &trans                &trans           &trans                 &mo 3
            >;
        };

        Bluetooth {
            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans        &trans  &trans  &trans
            >;
        };

        macros {
            bindings = <
&trans  &trans  &trans      &trans  &tap_read_csv  &trans  &trans  &trans  &pandas_if_then_else  &trans  &pandas_pivot_table  &trans
&trans  &trans  &splitData  &trans  &trans         &trans  &trans  &trans  &trans                &trans  &trans               &trans
&trans  &trans  &trans      &trans  &trans         &trans  &trans  &trans  &trans                &trans  &trans               &trans
                            &trans  &trans         &trans  &trans  &trans  &trans
            >;
        };

        excel {
            bindings = <
&trans  &trans          &trans         &trans           &trans          &excel_trim  &trans  &trans              &excel_ifs  &trans  &trans  &trans
&trans  &excel_average  &excel_sumifs  &trans           &trans          &trans       &trans  &trans              &trans      &trans  &trans  &trans
&trans  &trans          &trans         &excel_countifs  &excel_vlookup  &trans       &trans  &tap_excel_max_min  &trans      &trans  &trans  &trans
                                       &trans           &trans          &trans       &trans  &trans              &trans
            >;
        };
    };
};

